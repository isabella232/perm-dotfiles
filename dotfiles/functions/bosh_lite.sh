#!/bin/bash

target_bosh() {
  green='\033[32m'
  red='\033[31m'
  nc='\033[0m'

  pool_dir=~/workspace/capi-env-pool/bosh-lites/claimed

  pushd ${pool_dir} >/dev/null
    git pull
  popd >/dev/null

  if [ -z "$1" ]; then
    echo -e "${red}Usage: target_bosh <environment>. Valid environments are:${nc}"
    ls ${pool_dir}
  else
    env_file=${pool_dir}/${1}

    if [ -f "$env_file" ]; then
      # shellcheck source=/dev/null
      source "$env_file"
      echo -e "${green}Success!${nc}"
      env_ssh_key_path="$HOME/workspace/capi-env-pool/${1}/bosh.pem"

      if [ ! -f "$env_ssh_key_path" ]; then
        echo "$BOSH_GW_PRIVATE_KEY_CONTENTS" > "$env_ssh_key_path"
        chmod 0600 "$env_ssh_key_path"
      fi

      export BOSH_GW_PRIVATE_KEY="$env_ssh_key_path"
    else
      echo -e "${red}Environment '${1}' does not exist. Valid environments are:${nc}"
      ls ${pool_dir}
    fi
  fi
}

function claim_bosh_lite() {
  set -x
  env_dir=$(
    set -e
    function msg {
      echo -e "$1"
    }
    function realpath {
      echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")"
    }
    function claim_random_environment() {
      pool="bosh-lites"
      git pull --rebase --quiet
      for f in ./${pool}/unclaimed/*; do
        test -f "$f" || continue
        msg "Claiming $( basename "$f" )..."
        claim_specific_environment "$(basename "$f")"
        return $?
      done
      msg "No unclaimed environment found in $pool"
      return 1
    }
    function claim_specific_environment() {
      env=$1
      file="$(find . -name "${env}")"
      if [[  "$file" == "" ]]; then
        echo "$env" does not exist
        return 1
      fi
      set +e
      file_unclaimed="$(echo "${file}" | grep claim | grep -v unclaim)"
      set -e
      if [[ "$file_unclaimed" ]]; then
        msg "$env" could not be claimed
        return 1
      fi
      newfile="${file//unclaimed/claimed}"
      git mv "$file" "$newfile"
      git add "${newfile}"
    }

    function create_env_dir() {
      msg "Writing out .envrc..."
      env_file="$1"
      env_name="$(basename "${env_file}")"
      mkdir -p "${env_name}"
      green="\033[32m"
      nc="\033[0m"
      # shellcheck source=/dev/null
      source "${env_file}"
      env_ssh_key_path="$HOME/workspace/capi-env-pool/${env_name}/bosh.pem"
      cat << EOF > "${env_name}/.envrc"
#!/bin/bash

source ~/.functions/bosh_lite.sh

# NOTE: this file was auto-generated by 'claim_bosh_lite' alias
target_bosh "${env_name}"
echo -e "\n##################################\n"
echo -e "${green}Some example commands for BOSH + CF${nc}"
default_cmd='bosh deploy ~/workspace/cf-deployment/cf-deployment.yml -v system_domain=\$BOSH_LITE_DOMAIN -o ~/workspace/capi-ci/cf-deployment-operations/use-latest-stemcell.yml -o ~/workspace/capi-ci/cf-deployment-operations/skip-cert-verify.yml -o ~/workspace/cf-deployment/operations/bosh-lite.yml -o ~/workspace/cf-deployment/operations/bypass-cc-bridge.yml'
echo -e "${green}\n## Target this bosh-lite environment ##${nc}"
echo "target_bosh ${env_name}"
echo -e "${green}\n## Create and upload CAPI release ##${nc}"
echo "upload_capi_release"
echo -e "${green}\n## Deploy CF with latest CAPI release ##${nc}"
echo "create_and_deploy"
echo -e "${green}\n## Deploy CF noninteractively with latest CAPI release ##${nc}"
echo "create_and_force_deploy"
echo -e "${green}\n## Connect to this environment psql ##${nc}"
echo "psql_bosh_lite"
echo -e "${green}\n## Deploy CF with defaults ##${nc}"
echo "\${default_cmd}"
echo -e "${green}\n## Target CF API ##${nc}"
echo "cf api https://api.${BOSH_LITE_DOMAIN} --skip-ssl-validation"
echo -e "${green}\n## Target CF API, login as admin ##${nc}"
echo "target_cf"
echo -e "${green}\n## Target CF API, login as admin, and create org and space##${nc}"
echo "bootstrap_cf"
echo -e "${green}\n## Retrieve CF admin password ##${nc}"
echo 'credhub login -s "\$CREDHUB_SERVER" -u "\$CREDHUB_USERNAME" -p "\$CREDHUB_PASSWORD" --skip-tls-validation'
echo "credhub get --name '/bosh-lite/cf/cf_admin_password' --output-json | jq -r '.value'"
echo -e "${green}\n## Unclaim this environment ##${nc}"
echo "unclaim_bosh_lite ${env_name}"
echo -e "${green}\n## Short circuit CC traffic into local process ##${nc}"
echo "~/workspace/capi-release/src/cloud_controller_ng/scripts/short-circuit-cc"
echo -e "${green}\n## Print this help text ##${nc}"
echo ". .envrc"
echo -e "\n##################################\n"
EOF
      git add "${env_name}"
    }

    function commit_and_push() {
      git ci -n --quiet --message "manually claim ${env} on ${HOSTNAME} [nostory]" --no-verify
      msg "Pushing reservation to $( basename "$PWD" )..."
      git push --quiet
    }

    >&2 cd ~/workspace/capi-env-pool
    >&2 claim_random_environment
    env_file="$(realpath "$newfile")"
    >&2 create_env_dir "${env_file}"
    >&2 commit_and_push
    echo "$PWD/$(basename "${env_file}")"
  )

  # shellcheck disable=2181
  if [[ "$?" == 0 ]]; then
    direnv allow "${env_dir}"
    echo "Changing directory to '${env_dir}'..."
    cd "${env_dir}"
  fi
}

function unclaim_bosh_lite() {

  # ensures we don't remove the current working directory
  if [[ "$PWD" == *capi-env-pool* ]]; then
    cd "$HOME/workspace/capi-env-pool"
  fi
  (
    set -e
    cd ~/workspace/capi-env-pool

    working_pool="bosh-lites"
    broken_pool="broken-bosh-lites"

    if [ $# -eq 0 ]; then
      echo "Usage: $0 env_name"
      return 1
    fi

    git pull -r --quiet

    function mark_broken {
      env=$1
      file="$(find "${working_pool}" -name "${env}")"

      if [[ "$file" == "" ]]; then
        echo "$env does not exist in ${working_pool}"
        return 1
      fi

      read -r "?Hit enter to release ${env} "

      git mv "${file}" "${broken_pool}/unclaimed/"
      if [ -d "${env}" ]; then
        git rm -rf "${env}" && rm -rf "${env}"
      fi

      # trigger destroy-bosh-lite job
      date +%s >| .trigger-bosh-lites-destroy && git add .trigger-bosh-lites-destroy

      git ci -n --quiet -m"releasing $env on ${HOSTNAME} [nostory]" --no-verify
      echo "Pushing the release commit to $( basename "$PWD" )..."
      git push --quiet
    }

    for env in "$@"; do
      mark_broken "${env}"
    done
  )

  unset BOSH_CA_CERT BOSH_CLIENT BOSH_CLIENT_SECRET BOSH_ENVIRONMENT \
    BOSH_GW_USER BOSH_GW_HOST BOSH_LITE_DOMAIN BOSH_GW_PRIVATE_KEY_CONTENTS \
    BOSH_GW_PRIVATE_KEY

  echo "Done"
}
